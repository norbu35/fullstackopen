{"ast":null,"code":"var _jsxFileName = \"/home/norbu/workspace/fullstackopen/part9/patientor1/frontend/src/PatientPage/PatientPage.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useStateValue } from '../state';\nimport { updatePatient } from '../state/reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PatientPage = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [state, dispatch] = useStateValue();\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const {\n          data: patient\n        } = await axios.get(`http://localhost:3001/api/patients/${id}`);\n        dispatch(updatePatient(patient));\n      } catch (e) {\n        if (axios.isAxiosError(e)) {\n          console.error('Unknown Axios error', e);\n        } else {\n          console.error('Unknown general error', e);\n        }\n      }\n    };\n\n    fetchPatient();\n  }, [dispatch]);\n  if (!id) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Patient not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 19\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: state.patients[id].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), \"ssn: \", state.patients[id].ssn, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 37\n    }, this), \"occupation: \", state.patients[id].occupation, /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Entries:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), console.log(state.patients[id].entries), \";\", state.patients[id].entries.map(entry => {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: entry.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: entry.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: entry.diagnosisCodes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PatientPage, \"ttJdd4QtfYQ1cOW/8qDN5sbdrjI=\", false, function () {\n  return [useParams, useStateValue];\n});\n\n_c = PatientPage;\nexport default PatientPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientPage\");","map":{"version":3,"sources":["/home/norbu/workspace/fullstackopen/part9/patientor1/frontend/src/PatientPage/PatientPage.tsx"],"names":["axios","useEffect","useParams","useStateValue","updatePatient","PatientPage","id","state","dispatch","fetchPatient","data","patient","get","e","isAxiosError","console","error","patients","name","ssn","occupation","log","entries","map","entry","description","date","diagnosisCodes"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,aAAT,QAA8B,UAA9B;AAEA,SAASC,aAAT,QAA8B,kBAA9B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAASJ,SAAS,EAAxB;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBL,aAAa,EAAvC;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,YAAY,GAAG,YAAY;AAC/B,UAAI;AACF,cAAM;AAAEC,UAAAA,IAAI,EAAEC;AAAR,YAAoB,MAAMX,KAAK,CAACY,GAAN,CAC7B,sCAAqCN,EAAG,EADX,CAAhC;AAGAE,QAAAA,QAAQ,CAACJ,aAAa,CAACO,OAAD,CAAd,CAAR;AACD,OALD,CAKE,OAAOE,CAAP,EAAmB;AACnB,YAAIb,KAAK,CAACc,YAAN,CAAmBD,CAAnB,CAAJ,EAA2B;AACzBE,UAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCH,CAArC;AACD,SAFD,MAEO;AACLE,UAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAuCH,CAAvC;AACD;AACF;AACF,KAbD;;AAcAJ,IAAAA,YAAY;AACb,GAhBQ,EAgBN,CAACD,QAAD,CAhBM,CAAT;AAkBA,MAAI,CAACF,EAAL,EAAS,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACT,sBACE;AAAA,4BACE;AAAA,gBAAKC,KAAK,CAACU,QAAN,CAAeX,EAAf,EAAmBY;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,WAEQX,KAAK,CAACU,QAAN,CAAeX,EAAf,EAAmBa,GAF3B,oBAEgC;AAAA;AAAA;AAAA;AAAA,YAFhC,kBAGeZ,KAAK,CAACU,QAAN,CAAeX,EAAf,EAAmBc,UAHlC,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGL,OAAO,CAACM,GAAR,CAAYd,KAAK,CAACU,QAAN,CAAeX,EAAf,EAAmBgB,OAA/B,CALH,OAMGf,KAAK,CAACU,QAAN,CAAeX,EAAf,EAAmBgB,OAAnB,CAA2BC,GAA3B,CAAgCC,KAAD,IAAW;AACzC;AAAA;AAAA,gCACE;AAAA,oBAAIA,KAAK,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAID,KAAK,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,oBAAIF,KAAK,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAKD,KANA,CANH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAtCD;;GAAMtB,W;UACWH,S,EACWC,a;;;KAFtBE,W;AAwCN,eAAeA,WAAf","sourcesContent":["import axios from 'axios';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useStateValue } from '../state';\nimport { Patient } from '../types';\nimport { updatePatient } from '../state/reducer';\n\nconst PatientPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const [state, dispatch] = useStateValue();\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const { data: patient } = await axios.get<Patient>(\n          `http://localhost:3001/api/patients/${id}`\n        );\n        dispatch(updatePatient(patient));\n      } catch (e: unknown) {\n        if (axios.isAxiosError(e)) {\n          console.error('Unknown Axios error', e);\n        } else {\n          console.error('Unknown general error', e);\n        }\n      }\n    };\n    fetchPatient();\n  }, [dispatch]);\n\n  if (!id) return <div>Patient not found</div>;\n  return (\n    <div>\n      <h1>{state.patients[id].name}</h1>\n      ssn: {state.patients[id].ssn} <br />\n      occupation: {state.patients[id].occupation}\n      <h3>Entries:</h3>\n      {console.log(state.patients[id].entries)};\n      {state.patients[id].entries.map((entry) => {\n        <div>\n          <p>{entry.description}</p>\n          <p>{entry.date}</p>\n          <p>{entry.diagnosisCodes}</p>\n        </div>;\n      })}\n    </div>\n  );\n};\n\nexport default PatientPage;\n"]},"metadata":{},"sourceType":"module"}