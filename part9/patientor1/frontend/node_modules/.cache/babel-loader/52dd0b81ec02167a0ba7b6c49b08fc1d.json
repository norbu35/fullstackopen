{"ast":null,"code":"var _jsxFileName = \"/home/norbu/workspace/fullstackopen/part9/patientor1/frontend/src/AddPatientModal/FormField.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ErrorMessage, Field } from 'formik';\nimport { Select, FormControl, MenuItem, TextField as TextFieldMUI, Typography } from '@material-ui/core';\nimport { InputLabel } from '@material-ui/core';\nimport Input from '@material-ui/core/Input'; // structure of a single option\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FormikSelect = _ref => {\n  let {\n    field,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Select, { ...field,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n\n_c = FormikSelect;\nexport const SelectField = _ref2 => {\n  let {\n    name,\n    label,\n    options\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Field, {\n      fullWidth: true,\n      style: {\n        marginBottom: '0.5em'\n      },\n      label: label,\n      component: FormikSelect,\n      name: name,\n      children: options.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: option.value,\n        children: option.label || option.value\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_c2 = SelectField;\nexport const TextField = _ref3 => {\n  let {\n    field,\n    label,\n    placeholder\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '1em'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextFieldMUI, {\n      fullWidth: true,\n      label: label,\n      placeholder: placeholder,\n      ...field\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      style: {\n        color: 'red'\n      },\n      children: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        name: field.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }, this);\n};\n/*\n  for exercises 9.24.-\n*/\n\n_c3 = TextField;\nexport const NumberField = _ref4 => {\n  _s();\n\n  let {\n    field,\n    label,\n    min,\n    max\n  } = _ref4;\n  const [value, setValue] = useState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '1em'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextFieldMUI, {\n      fullWidth: true,\n      label: label,\n      placeholder: String(min),\n      type: \"number\",\n      ...field,\n      value: value,\n      onChange: e => {\n        const value = parseInt(e.target.value);\n        if (value === undefined) return;\n        if (value > max) setValue(max);else if (value <= min) setValue(min);else setValue(Math.floor(value));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      style: {\n        color: 'red'\n      },\n      children: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        name: field.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NumberField, \"hWRfrSP8yP0Yit5gONTVsURNXRY=\");\n\n_c4 = NumberField;\nexport const DiagnosisSelection = _ref5 => {\n  _s2();\n\n  let {\n    diagnoses,\n    setFieldValue,\n    setFieldTouched\n  } = _ref5;\n  const [selectedDiagnoses, setDiagnoses] = useState([]);\n  const field = 'diagnosisCodes';\n\n  const onChange = data => {\n    setDiagnoses([...data]);\n    setFieldTouched(field, true);\n    setFieldValue(field, selectedDiagnoses);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    style: {\n      width: 552,\n      marginBottom: '30px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      children: \"Diagnoses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      multiple: true,\n      value: selectedDiagnoses,\n      onChange: e => onChange(e.target.value),\n      input: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 16\n      }, this),\n      children: stateOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: option.value,\n        children: option.text\n      }, option.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      name: field\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(DiagnosisSelection, \"xs+goU3zNV4M4dW1LMfoZupxFBM=\");\n\n_c5 = DiagnosisSelection;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"FormikSelect\");\n$RefreshReg$(_c2, \"SelectField\");\n$RefreshReg$(_c3, \"TextField\");\n$RefreshReg$(_c4, \"NumberField\");\n$RefreshReg$(_c5, \"DiagnosisSelection\");","map":{"version":3,"sources":["/home/norbu/workspace/fullstackopen/part9/patientor1/frontend/src/AddPatientModal/FormField.tsx"],"names":["React","useState","ErrorMessage","Field","Select","FormControl","MenuItem","TextField","TextFieldMUI","Typography","InputLabel","Input","FormikSelect","field","props","SelectField","name","label","options","marginBottom","map","option","value","placeholder","color","NumberField","min","max","setValue","String","e","parseInt","target","undefined","Math","floor","DiagnosisSelection","diagnoses","setFieldValue","setFieldTouched","selectedDiagnoses","setDiagnoses","onChange","data","stateOptions","diagnosis","key","code","text","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { ErrorMessage, Field, FieldProps, FormikProps } from 'formik';\nimport {\n  Select,\n  FormControl,\n  MenuItem,\n  TextField as TextFieldMUI,\n  Typography,\n} from '@material-ui/core';\nimport { Diagnoses, Gender } from '../types';\nimport { InputLabel } from '@material-ui/core';\nimport Input from '@material-ui/core/Input';\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nconst FormikSelect = ({ field, ...props }: FieldProps) => (\n  <Select {...field} {...props} />\n);\n\nexport const SelectField = ({ name, label, options }: SelectFieldProps) => (\n  <>\n    <InputLabel>{label}</InputLabel>\n    <Field\n      fullWidth\n      style={{ marginBottom: '0.5em' }}\n      label={label}\n      component={FormikSelect}\n      name={name}\n    >\n      {options.map((option) => (\n        <MenuItem key={option.value} value={option.value}>\n          {option.label || option.value}\n        </MenuItem>\n      ))}\n    </Field>\n  </>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField = ({ field, label, placeholder }: TextProps) => (\n  <div style={{ marginBottom: '1em' }}>\n    <TextFieldMUI\n      fullWidth\n      label={label}\n      placeholder={placeholder}\n      {...field}\n    />\n    <Typography variant=\"subtitle2\" style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </Typography>\n  </div>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField = ({ field, label, min, max }: NumberProps) => {\n  const [value, setValue] = useState<number>();\n\n  return (\n    <div style={{ marginBottom: '1em' }}>\n      <TextFieldMUI\n        fullWidth\n        label={label}\n        placeholder={String(min)}\n        type=\"number\"\n        {...field}\n        value={value}\n        onChange={(e) => {\n          const value = parseInt(e.target.value);\n          if (value === undefined) return;\n          if (value > max) setValue(max);\n          else if (value <= min) setValue(min);\n          else setValue(Math.floor(value));\n        }}\n      />\n      <Typography variant=\"subtitle2\" style={{ color: 'red' }}>\n        <ErrorMessage name={field.name} />\n      </Typography>\n    </div>\n  );\n};\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched,\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>['setFieldValue'];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>['setFieldTouched'];\n}) => {\n  const [selectedDiagnoses, setDiagnoses] = useState<string[]>([]);\n  const field = 'diagnosisCodes';\n  const onChange = (data: string[]) => {\n    setDiagnoses([...data]);\n    setFieldTouched(field, true);\n    setFieldValue(field, selectedDiagnoses);\n  };\n\n  const stateOptions = diagnoses.map((diagnosis) => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code,\n  }));\n\n  return (\n    <FormControl style={{ width: 552, marginBottom: '30px' }}>\n      <InputLabel>Diagnoses</InputLabel>\n      <Select\n        multiple\n        value={selectedDiagnoses}\n        onChange={(e) => onChange(e.target.value as string[])}\n        input={<Input />}\n      >\n        {stateOptions.map((option) => (\n          <MenuItem key={option.key} value={option.value}>\n            {option.text}\n          </MenuItem>\n        ))}\n      </Select>\n      <ErrorMessage name={field} />\n    </FormControl>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}