{"ast":null,"code":"var _jsxFileName = \"/home/norbu/workspace/fullstackopen/part9/patientor1/frontend/src/PatientPage/PatientPage.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useStateValue } from '../state';\nimport { setDiagnosesList, updatePatient } from '../state/reducer';\nimport Diagnoses from '../components/Diagnoses';\nimport { apiBaseUrl } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PatientPage = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [state, dispatch] = useStateValue();\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const {\n          data: patient\n        } = await axios.get(`${apiBaseUrl}/patients/${id}`);\n        dispatch(updatePatient(patient));\n      } catch (e) {\n        if (axios.isAxiosError(e)) {\n          console.error('Unknown Axios error', e);\n        } else {\n          console.error('Unknown general error', e);\n        }\n      }\n    };\n\n    fetchPatient();\n  }, [dispatch]);\n  useEffect(() => {\n    const fetchDiagnoses = async () => {\n      try {\n        const {\n          data: diagnoses\n        } = await axios.get('http://localhost:3001/api/diagnoses');\n        dispatch(setDiagnosesList(diagnoses));\n      } catch (e) {\n        if (axios.isAxiosError(e)) {\n          console.error('Unknown Axios error', e);\n        } else {\n          console.error('Unknown general error', e);\n        }\n      }\n    };\n\n    fetchDiagnoses();\n  });\n  if (!id) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Patient not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 19\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: state.patients[id].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), \"SSN: \", state.patients[id].ssn, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 37\n    }, this), \"Occupation: \", state.patients[id].occupation, /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Entries:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), state.patients[id].entries.map(entry => /*#__PURE__*/_jsxDEV(Diagnoses, {\n      entry: entry\n    }, entry.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PatientPage, \"1ugpZgwPb0nTuhczfxsSL0q1jfM=\", false, function () {\n  return [useParams, useStateValue];\n});\n\n_c = PatientPage;\nexport default PatientPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientPage\");","map":{"version":3,"sources":["/home/norbu/workspace/fullstackopen/part9/patientor1/frontend/src/PatientPage/PatientPage.tsx"],"names":["axios","useEffect","useParams","useStateValue","setDiagnosesList","updatePatient","Diagnoses","apiBaseUrl","PatientPage","id","state","dispatch","fetchPatient","data","patient","get","e","isAxiosError","console","error","fetchDiagnoses","diagnoses","patients","name","ssn","occupation","entries","map","entry"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,aAAT,QAA8B,UAA9B;AAEA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,kBAAhD;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,UAAT,QAA2B,cAA3B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAASP,SAAS,EAAxB;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBR,aAAa,EAAvC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,YAAY,GAAG,YAAY;AAC/B,UAAI;AACF,cAAM;AAAEC,UAAAA,IAAI,EAAEC;AAAR,YAAoB,MAAMd,KAAK,CAACe,GAAN,CAC7B,GAAER,UAAW,aAAYE,EAAG,EADC,CAAhC;AAGAE,QAAAA,QAAQ,CAACN,aAAa,CAACS,OAAD,CAAd,CAAR;AACD,OALD,CAKE,OAAOE,CAAP,EAAmB;AACnB,YAAIhB,KAAK,CAACiB,YAAN,CAAmBD,CAAnB,CAAJ,EAA2B;AACzBE,UAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCH,CAArC;AACD,SAFD,MAEO;AACLE,UAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAuCH,CAAvC;AACD;AACF;AACF,KAbD;;AAcAJ,IAAAA,YAAY;AACb,GAhBQ,EAgBN,CAACD,QAAD,CAhBM,CAAT;AAkBAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,cAAc,GAAG,YAAY;AACjC,UAAI;AACF,cAAM;AAAEP,UAAAA,IAAI,EAAEQ;AAAR,YAAsB,MAAMrB,KAAK,CAACe,GAAN,CAChC,qCADgC,CAAlC;AAGAJ,QAAAA,QAAQ,CAACP,gBAAgB,CAACiB,SAAD,CAAjB,CAAR;AACD,OALD,CAKE,OAAOL,CAAP,EAAU;AACV,YAAIhB,KAAK,CAACiB,YAAN,CAAmBD,CAAnB,CAAJ,EAA2B;AACzBE,UAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCH,CAArC;AACD,SAFD,MAEO;AACLE,UAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAuCH,CAAvC;AACD;AACF;AACF,KAbD;;AAcAI,IAAAA,cAAc;AACf,GAhBQ,CAAT;AAkBA,MAAI,CAACX,EAAL,EAAS,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACT,sBACE;AAAA,4BACE;AAAA,gBAAKC,KAAK,CAACY,QAAN,CAAeb,EAAf,EAAmBc;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,WAEQb,KAAK,CAACY,QAAN,CAAeb,EAAf,EAAmBe,GAF3B,oBAEgC;AAAA;AAAA;AAAA;AAAA,YAFhC,kBAGed,KAAK,CAACY,QAAN,CAAeb,EAAf,EAAmBgB,UAHlC,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGf,KAAK,CAACY,QAAN,CAAeb,EAAf,EAAmBiB,OAAnB,CAA2BC,GAA3B,CAAgCC,KAAD,iBAC9B,QAAC,SAAD;AAA0B,MAAA,KAAK,EAAEA;AAAjC,OAAgBA,KAAK,CAACnB,EAAtB;AAAA;AAAA;AAAA;AAAA,YADD,CALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CApDD;;GAAMD,W;UACWN,S,EACWC,a;;;KAFtBK,W;AAsDN,eAAeA,WAAf","sourcesContent":["import axios from 'axios';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useStateValue } from '../state';\nimport { Patient, Diagnose } from '../types';\nimport { setDiagnosesList, updatePatient } from '../state/reducer';\nimport Diagnoses from '../components/Diagnoses';\nimport { apiBaseUrl } from '../constants';\n\nconst PatientPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const [state, dispatch] = useStateValue();\n\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const { data: patient } = await axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        );\n        dispatch(updatePatient(patient));\n      } catch (e: unknown) {\n        if (axios.isAxiosError(e)) {\n          console.error('Unknown Axios error', e);\n        } else {\n          console.error('Unknown general error', e);\n        }\n      }\n    };\n    fetchPatient();\n  }, [dispatch]);\n\n  useEffect(() => {\n    const fetchDiagnoses = async () => {\n      try {\n        const { data: diagnoses } = await axios.get<Diagnose[]>(\n          'http://localhost:3001/api/diagnoses'\n        );\n        dispatch(setDiagnosesList(diagnoses));\n      } catch (e) {\n        if (axios.isAxiosError(e)) {\n          console.error('Unknown Axios error', e);\n        } else {\n          console.error('Unknown general error', e);\n        }\n      }\n    };\n    fetchDiagnoses();\n  });\n\n  if (!id) return <div>Patient not found</div>;\n  return (\n    <div>\n      <h1>{state.patients[id].name}</h1>\n      SSN: {state.patients[id].ssn} <br />\n      Occupation: {state.patients[id].occupation}\n      <h3>Entries:</h3>\n      {state.patients[id].entries.map((entry) => (\n        <Diagnoses key={entry.id} entry={entry} />\n      ))}\n    </div>\n  );\n};\n\nexport default PatientPage;\n"]},"metadata":{},"sourceType":"module"}